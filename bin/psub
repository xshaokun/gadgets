#!/usr/bin/env bash
 
echo "=============================================="
echo "==        PLUTO LSF Job Submission          =="
echo "=============================================="

while getopts 'hnj::' OPTNAME; do
    case "$OPTNAME" in
    h)
        echo "Description:"
        echo "- create or override the hard link pluto.ini to given Pluto parameter file"
        echo "- modify job script with task name while the original file is backuped with extention .bak"
        echo "- parse and create the corresponding output dirctory"
        echo "- submit job script"
        echo ""
        echo "Usage: psub [-h] [-j job.s] FILE.ini"
        echo "-h,    This help text"
        echo "-n,    Not submit job script"
        echo "-j,    Specify filename of job script. Default: job.s"
        exit 0
        ;;
    n)
        no_submit=true
        shift
        ;;
    j)
        jobscript=$OPTARG
        echo "> Log:    Job Script: $jobscript"
        shift 2
        ;;
    ?)
        echo "usage: $(basename $0) [-h] [-n] [-j jobscript] file.ini" >&2
        exit 1
        ;;
    esac
done

# Set default filename of job script to job.s
if [ -z $jobscript ]; then
    jobscript=job.s
fi

filepath=`readlink -f $1`
if [ -f pluto.ini ]; then
    if [ -L pluto.ini ]; then
        rm pluto.ini
        ln -s $filepath pluto.ini && echo "> Action: pluto.ini -> $filepath"
    else
        echo "> Log:    pluto.ini already exits but is not a symbolic link, skip overriding it"
    fi
else
    ln -s $filepath pluto.ini && echo "> Action: pluto.ini -> $filepath"
fi

# Task name is the init filename without extension
filename=${filepath##*/};
taskname=${filename%.ini}
echo "> Action: Modify $jobscript with task name -> $taskname"

# Parsing and create output directory
output_dir=`awk '{if ($1 == "output_dir") print $2}' $filepath`/
if [ $output_dir ]; then
    echo "> Log:    Parsing output directory -> $output_dir"
    if [ -d $output_dir ]; then
        echo "> Log:    Output directory $output_dir already exits"
    elif [ -f $output_dir ]; then
        echo "X Error:  $output_dir already exits but is not a directory."
        exit 1
    else
        echo "> Action: Creating output directory -> $output_dir"
    fi
else
    echo "> Log:    No specified output directory"
fi

# Replace some fields in job script with task name, the fields include
# job name
# output filename
# error filename
if [ -e $jobscript ]; then
    sed -i.bak -r -e \
    "\
    s|(^#BSUB[ ]+-J[ ]+)[^ ]+([ ]*.*)|\1$taskname\2|;\
    s|(^#BSUB[ ]+-o[ ]+)[^ ]+([ ]*.*)|\1$output_dir$taskname.out\2|;\
    s|(^#BSUB[ ]+-e[ ]+)[^ ]+([ ]*.*)|\1$output_dir$taskname.err\2|;\
    " $jobscript
else
    echo "X Error:  $jobscript does not exist"
    exit 1
fi

# submit job script
if [ -z $no_submit ]; then
    bsub < $jobscript
else
    echo "> Log:    Not submit job script"
fi
