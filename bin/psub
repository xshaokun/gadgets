#!/usr/bin/env bash

# Define something above all
steps=8 # total steps of workflow
istep=0 # count the step of workflow
origin=$(pwd) # directory where execute the script
tmplog=$origin/psub.tmp # temperory log file
if [ $(uname) = "Darwin" ] && [ -n `which grealpath` ]; then
    # Due to different behaviors of realpath and realink on Mac,
    # coreutils is required.
    shopt -s expand_aliases
    alias realpath="grealpath"
    alias readlink="greadlink"
fi

# define the formats of log message
log="> Log:       "
err="\e[31;1mX Error:     \e[0m"
kw="\e[96m%s\e[0m"
arw="\e[92;1m->\e[0m"

print(){
    # save output message
    printf "$@" | tee -a $tmplog
}

# format stderr, make it the only red log
exec 2> >(while read line; do printf "\e[31;1m! Warning:    $line\e[0m" >&2; done)

print_header(){
# generate by $ pyfiglet -j center -f smslant "PLUTO Job Submission"
    print "\e[2m\n\
           ___  __   __  ____________       __     __   \n\
          / _ \/ /  / / / /_  __/ __ \  __ / /__  / /   \n\
         / ___/ /__/ /_/ / / / / /_/ / / // / _ \/ _ \  \n\
        /_/  /____/\____/ /_/  \____/  \___/\___/_.__/  \n\
            ____     __         _         _             \n\
           / __/_ __/ /  __ _  (_)__ ___ (_)__  ___     \n\
          _\ \/ // / _ \/  ' \/ (_-<(_-</ / _ \/ _ \    \n\
         /___/\_,_/_.__/_/_/_/_/___/___/_/\___/_//_/    \n\
    \n
    Execution Time: $(date)
    \e[0m\n"
}

exit_psub(){
    # remove tmp log before exit
    rm $tmplog &&
    printf "$err $kw Exit in step $istep !" &&
    exit $1
}

usage="\
Usage: psub [-h] [-n] [-x] [-j jobscript] [-s src_dir] [-d file] [-m message] [-t tag] [FILE.ini]\
"

# The main part of the script
print_header | tee $tmplog
print "\e[33;1m$ Command:    $0 $*\e[0m\n"
while getopts 'hnxj:s:d:m:t:' OPTNAME; do
    case "$OPTNAME" in
    h)
        printf "Workflow:\n"
        printf "1. parse and create the corresponding output directory from given Pluto parameter file\n"
        printf "2. create or override the soft link pluto.ini to the output directory\n"
        printf "3. copy definitions.h to the output directory (easy for yt analysis)\n"
        printf "4. copy executable file pluto to the output directory as backup\n"
        printf "5. copy sysconf.out to the output directory for recording compiler info\n"
        printf "6. echo model version from model_version.txt (if exists) into sysconf.out\n"
        printf "7. create/override job script according to the task name (filename of parameter file)\n"
        printf "8. submit job script\n"
        printf "\n"
        printf "%s\n" "$usage"
        printf "%s\n" "-h,    This help text"
        printf "%s\n" "-n,    Not submit job script"
        printf "%s\n" "-x,    Not change definitions.h and the executable pluto"
        printf "%s\n" "-j,    Specify filename of job script. Default: job.s"
        printf "%s\n" "-s,    Specify the directory of source code. Default: \${filepath%/runs*}/code/"
        printf "%s\n" "-d,    Compare parameter file with given file, and print to psub_diff.log"
        printf "%s\n" "-m,    Print a message to psub.log"
        printf "%s\n" "-t,    Specify a tag to the output directory"
        rm $tmplog &&
        exit 0
        ;;
    n)
        no_submit=true
        steps=$(($steps - 1))
        ;;
    x)
        no_pluto=true
        steps=$(($steps - 2))
        ;;
    j)
        jobscript=$(readlink -f $OPTARG)
        print "$log Specified Job Script: $kw\n" $jobscript
        ;;
    s)
        src=$(readlink -f $OPTARG)/
        print "$log Specified Directory of Source Code: $kw\n" $src
        ;;
    d)
        orifile=$(readlink -f $OPTARG)
        print "$log Specified original parameter file to compare: $kw\n" $orifile
        ;;
    m)
        has_msg=true
        msg=$OPTARG
        ;;
    t)
        has_tag=true
        tag=$OPTARG
        print "$log Specified Tag for the Output Directory: $kw\n" $tag
        ;;
    ?)
        printf "$usage" >&2
        exit_psub 1
        ;;
    esac
done
shift "$(($OPTIND - 1))"

# Save message
if [ $has_msg ]; then
    print "\e[33;1m$ Comment:    $msg\e[0m\n"
fi

# define the formats of log message
stp="\e[92;1m> Done (%d/$steps):\e[0m"

# Get Pluto parameter file
if [ ! -f $1 ]; then
    printf "$err $kw does not exist !\n" $1
    exit_psub 1
fi
inifile=$1
if [ -z $1 ]; then
    inifile=pluto.ini
else
    inifile=$1
fi
inifile=$(readlink -f $inifile)
print "$log Specified parameter file: $kw\n" $inifile
directory=$(dirname $inifile) || exit_psub 1
# Task name is the init filename without extension
taskname=$(basename $inifile .ini);
print "$log Parsed taskname: $kw\n" $taskname

# Compare files
if [ $orifile ]; then
    print "$log Compare files: $kw $arw $kw check $directory/psub_diff.log for details\n" $orifile $inifile
    printf "$kw $arw $kw\n" $orifile $inifile >> $directory/psub_diff.log
    diff_result=$(diff -y --suppress-common-lines $orifile $inifile)
    printf "$diff_result\n\n" >> $directory/psub_diff.log
    printf "$diff_result\n\n" >> $tmplog
fi

# 1. Parsing and create output directory
output_dir=$(awk '{if ($1 == "output_dir") print $2}' $inifile)
if [ -z $output_dir ]; then
    if [ $taskname != pluto ]; then
        # output_dir is not defined in .ini file
        # If the filename is not pluto, use it as output_dir
        output_dir=$(readlink -f $directory/$taskname) || exit_psub 1
        print "$log Parsed output directory from filename: $kw\n" $output_dir
        from_filename=true
        if [ $has_tag ]; then
            # add tag to the output directory
            output_dir="${output_dir}_${tag}"
            print "$log Updated output directory with given tag: $kw\n" $tag
        fi
    fi
else
    # output_dir is defined in .ini file
    output_dir=$(readlink -f $directory/$output_dir) || exit_psub 1
    print "$log Parsed output directory from configuration in parameter file: $kw\n" $output_dir
fi
if [ $output_dir ]; then
    # Create the output directory if it can be parsed from above
    if [ -d $output_dir ]; then
        print "$log Output directory already exits, so just use it\n"
    elif [ -f $output_dir ]; then
        printf "$err $kw already exists but is not a directory\n" $output_dir
        exit_psub 1
    else
        mkdir $output_dir
    fi
    istep=$(($istep + 1))
    print "$stp Create output directory: $kw\n" $istep $output_dir
    if [ $directory ]; then
        if [ $from_filename ]; then
            cd $output_dir
            print "$log cd to the output directory: $kw\n" $output_dir
        else
            # if output_dir is configured in .ini file
            # the following workflow will be done in the directory of parameter file
            cd $directory
            print "$log cd to the directory of parameter file: $kw\n" $directory
        fi
    else
        printf "$err Cannot parse directory of parameter file!\n"
        exit_psub 1
    fi
else
        output_dir=$origin || exit_psub 1
        print "$log No specified output directory, outputs will be saved in the current directory\n"
        istep=$(($istep + 1))
        print "$stp Determine output directory: $kw\n" $istep $output_dir
fi

# If running under output directory and not specified parameter file,
# consider it as a re-running
if [[ -z $1 && $output_dir == $origin ]]; then
    no_pluto=true
fi

# 2. Create or override the soft link pluto.ini
inipluto=$output_dir/pluto.ini
# Use relative path for link
rel_filepath=$(realpath --relative-to=$output_dir $inifile)
if [ -f $inipluto ]; then
    # Override
    if [ -L $inipluto ]; then
        rm $inipluto
        ln -s $rel_filepath $inipluto &&
        istep=$(($istep + 1)) &&
        print "$stp Link pluto.ini: $kw $arw $kw\n" $istep $inipluto $rel_filepath
    else
        print "$log $kw already exits but is not a symbolic link, so just use it\n" $inipluto &&
        istep=$(($istep + 1)) &&
        print "$stp Use $kw itself\n" $istep $inipluto
    fi
else
    # Create
    ln -s $rel_filepath $inipluto &&
    istep=$(($istep + 1)) &&
    print "$stp Link pluto.ini: $kw $arw $kw\n" $istep $inipluto $rel_filepath
fi

# 3+4. Copy definitions.h and pluto from source code to the output directory
if [ -z $no_pluto ]; then
    if [ -z $src ]; then
        src=${directory%/runs*}/code
    fi
    print "$log Determine source code directory: $kw\n" $src
    if [ ! -d $src ]; then
        printf "$err Directory of source code does not exist: $kw\n" $src
        exit_psub 1
    fi
    cp $src/definitions.h $output_dir &&
    istep=$(($istep + 1)) &&
    print "$stp Copy definitions.h: $kw $arw $kw\n" $istep $src/definitions.h $output_dir/definitions.h

    cp $src/pluto $output_dir &&
    istep=$(($istep + 1)) &&
    print "$stp Copy pluto: $kw $arw $kw\n" $istep $src/pluto $output_dir/pluto
else
    istep=$(($istep + 1)) &&
    print "$stp Skip updating definitions.h\n" $istep
    istep=$(($istep + 1)) &&
    print "$stp Skip updating pluto\n" $istep
fi

# 5+6. Copy sysconf.out and echo model version into it
cp $src/sysconf.out $output_dir &&
istep=$(($istep + 1)) &&
print "$stp Copy sysconf.out: $kw $arw $kw\n" $istep $src/sysconf.out $output_dir/sysconf.out

if [ -e $src/model_version.txt ]; then
    version=`cat $src/model_version.txt` &&
    echo "MODEL_VERSION  = \"$version\"" >> $output_dir/sysconf.out &&
    istep=$(($istep + 1)) &&
    print "$stp Echo model version: $kw $arw $kw\n" $istep $version $output_dir/sysconf.out
fi

# Set default filename of job script to job.s
if [ -z $jobscript ]; then
    jobscript=$origin/job.s
fi
jobscript_name=$(basename $jobscript)

# 7. Replace some fields in job script with task name, the fields include
# job name
# output filename
# error filename
if [ -e $jobscript ]; then
    if [ $jobscript == $output_dir/$jobscript_name ]; then
        print "$log Template job script is already in output directory, so just use it\n"
    else
        sed -r -e \
        "\
        s|(^#BSUB[ ]+-J[ ]+)[^ ]+([ ]*.*)$|\1$taskname\2|;\
        s|(^#BSUB[ ]+-o[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/_lsf_out.%J\2|;\
        s|(^#BSUB[ ]+-e[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/_lsf_err.%J\2|;\
        s|(^.*[ ]+)[^ ]+pluto(.*-i[ ]+)[^ ]+(.*)|\1$output_dir/pluto\2$inifile\3|;\
        s|^./pluto(.*-i[ ]+)[^ ]+(.*)|$output_dir/pluto\1$inifile\2|;\
        " $jobscript > $output_dir/$jobscript_name &&
        istep=$(($istep + 1)) &&
        print "$stp Create/Override: $kw\n" $istep $output_dir/$jobscript_name
    fi
else
    printf "$err Template job script $kw does not exist !\n" $jobscript
    exit_psub 1
fi

# 8. submit job script
if [ -z $no_submit ]; then
    submit=$(bsub < $output_dir/$jobscript_name) &&
    istep=$(($istep + 1)) &&
    print "$stp Submit job script: %s\n" $istep "$submit"
else
    print "$log Not submit job script\n"
fi

# Archive tmp log
cat $tmplog >> $output_dir/psub.log &&
rm  $tmplog
