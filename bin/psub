#!/usr/bin/env bash

# Total steps of workflow
steps=6
# define the formats of log message
log="> Log:       "
err="\e[31;1mX Error:     \e[0m"
stp="\e[92;1m> Done (%d/$steps):\e[0m"
kw="\e[96m%s\e[0m"
arw="\e[92;1m->\e[0m"
# generate by $ pyfiglet -j center -f smslant "PLUTO Job Submission" 
printf "\e[2m"
printf "%s\n" "           ___  __   __  ____________       __     __   "
printf "%s\n" "          / _ \/ /  / / / /_  __/ __ \  __ / /__  / /   "
printf "%s\n" "         / ___/ /__/ /_/ / / / / /_/ / / // / _ \/ _ \  "
printf "%s\n" "        /_/  /____/\____/ /_/  \____/  \___/\___/_.__/  "
printf "%s\n" "            ____     __         _         _             "
printf "%s\n" "           / __/_ __/ /  __ _  (_)__ ___ (_)__  ___     "
printf "%s\n" "          _\ \/ // / _ \/  ' \/ (_-<(_-</ / _ \/ _ \    "
printf "%s\n" "         /___/\_,_/_.__/_/_/_/_/___/___/_/\___/_//_/    "
printf "\e[0m\n"

usage="Usage: psub [-h] [-n] [-x] [-j jobscript] [-s src_dir] FILE.in"
while getopts 'hnxj:s:' OPTNAME; do
    case "$OPTNAME" in
    h)
        printf "Workflow:\n"
        printf "1. parse and create the corresponding output dirctory from given Pluto parameter file\n"
        printf "2. create or override the soft link pluto.ini to the output directory\n"
        printf "3. copy definitions.h to the output directory (easy for yt analysis)\n"
        printf "4. copy executable file pluto to the output directory as backup\n"
        printf "5. create/override job script according to the task name (filename of parameter file)\n"
        printf "6. submit job script\n"
        printf "\n"
        printf "%s\n" "$usage"
        printf "%s\n" "-h,    This help text"
        printf "%s\n" "-n,    Not submit job script"
        printf "%s\n" "-x,    Not change executable file pluto"
        printf "%s\n" "-j,    Specify filename of job script. Default: job.s"
        printf "%s\n" "-s,    Specify the directory of source code. Default: \${filepath%/runs*}/code/"
        exit 0
        ;;
    n)
        no_submit=true
        steps=$(($steps - 1))
        ;;
    x)
        no_pluto=true
        steps=$(($steps - 1))
        ;;
    j)
        jobscript=$(readlink -f $OPTARG)
        printf "$log Specified Job Script: $kw\n" $jobscript
        ;;
    s)
        src=$(readlink -f $OPTARG)/
        printf "$log Specified Directory of Source Code: $kw\n" $src
        ;;
    ?)
        printf "$usage" >&2
        exit 1
        ;;
    esac
done
shift "$(($OPTIND - 1))"

# Get Pluto parameter file
filepath=$(readlink -f $1)
if [ ! -f $filepath ]; then
    printf "$err $kw does not exist !\n" $filepath
    exit 1
fi

# 1. Parsing and create output directory
output_dir=$(awk '{if ($1 == "output_dir") print $2}' $filepath)
output_dir=$(readlink -f $(dirname $filepath)/$output_dir)
if [ $output_dir ]; then
    printf "$log Parsed output directory: $kw\n" $output_dir
    if [ -d $output_dir ]; then
        printf "$log Output directory already exits, so just use it\n"
    elif [ -f $output_dir ]; then
        printf "$err $kw already exists but is not a directory\n" $output_dir
        exit 1
    else
        mkdir $output_dir
    fi
else
    printf "$log No specified output directory, outputs will be saved in the current directory\n"
fi
    printf "$stp Create output directory: $kw\n" 1 $output_dir

# 2. Create or override the soft link pluto.ini
inifile=$output_dir/pluto.ini
# Use relative path for link
rel_filepath=$(realpath --relative-to=$output_dir $filepath)
if [ -f $inifile ]; then
    # Override
    if [ -L $inifile ]; then
        rm $inifile
        ln -s $rel_filepath $inifile &&
        printf "$stp Link pluto.ini: $kw $arw $kw\n" 2 $inifile $rel_filepath
    else
        printf "$log $kw already exits but is not a symbolic link, so just use it\n" $inifile &&
        printf "$stp Use $kw itself\n" 2 $inifile
    fi
else
    # Create
    ln -s $rel_filepath $inifile &&
    printf "$stpLink pluto.ini: $kw $arw $kw\n" 2 $inifile $rel_filepath
fi

# 3. Copy definitions.h to the output directory
if [ -z $src ]; then
    src=${filepath%/runs*}/code
fi
if [ ! -d $src ]; then
    printf "$err Directory of source code does not exist: $kw\n" $src
    exit 1
fi
cp $src/definitions.h $output_dir &&
printf "$stp Copy definitions.h: $kw $arw $kw\n" 3 $src/definitions.h $output_dir/definitions.h
# 4. Copy pluto to the output directory
if [ -z $no_pluto ]; then
    cp $src/pluto $output_dir &&
    printf "$stp Copy pluto: $kw $arw $kw\n" 4 $src/pluto $output_dir/pluto
else
    printf "$stp Do not change pluto\n" 4
fi

# Set default filename of job script to job.s
jobscript_name=job.s
if [ -z $jobscript ]; then
    jobscript=$(readlink -f job.s)
    jobscript_name=$(basename $jobscript)
fi

# Task name is the init filename without extension
taskname=$(basename $filepath .ini);
printf "$log Parsed taskname: $kw\n" $taskname
# 5. Replace some fields in job script with task name, the fields include
# job name
# output filename
# error filename
if [ -e $jobscript ]; then
    sed -r -e \
    "\
    s|(^#BSUB[ ]+-J[ ]+)[^ ]+([ ]*.*)$|\1$taskname\2|;\
    s|(^#BSUB[ ]+-o[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/%J.out\2|;\
    s|(^#BSUB[ ]+-e[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/%J.err\2|;\
    s|(^.*[ ]+)[^ ]+pluto(.*-i[ ]+)[^ ]+(.*)|\1$output_dir/pluto\2$inifile\3|;\
    " $jobscript > $output_dir/$jobscript_name &&
    printf "$stp Create/Override: $kw\n" 5 $output_dir/$jobscript_name
else
    printf "$err Tempelate job script $kw does not exist !\n" $jobscript
    exit 1
fi

# 6. submit job script
if [ -z $no_submit ]; then
    cd $(dirname $filepath) &&
    bsub < $output_dir/$jobscript_name &&
    printf "$stp Submit job script\n" 6
    cd - > /dev/null
else
    printf "$log Not submit job script\n"
fi
