#!/usr/bin/env bash

# Total steps of workflow
steps=6
istep=0
origin=$(pwd)
# generate by $ pyfiglet -j center -f smslant "PLUTO Job Submission" 
printf "\e[2m"
printf "%s\n" "           ___  __   __  ____________       __     __   "
printf "%s\n" "          / _ \/ /  / / / /_  __/ __ \  __ / /__  / /   "
printf "%s\n" "         / ___/ /__/ /_/ / / / / /_/ / / // / _ \/ _ \  "
printf "%s\n" "        /_/  /____/\____/ /_/  \____/  \___/\___/_.__/  "
printf "%s\n" "            ____     __         _         _             "
printf "%s\n" "           / __/_ __/ /  __ _  (_)__ ___ (_)__  ___     "
printf "%s\n" "          _\ \/ // / _ \/  ' \/ (_-<(_-</ / _ \/ _ \    "
printf "%s\n" "         /___/\_,_/_.__/_/_/_/_/___/___/_/\___/_//_/    "
printf "\e[0m\n"

usage="Usage: psub [-h] [-n] [-x] [-j jobscript] [-s src_dir] [FILE.ini]"
while getopts 'hnxj:s:' OPTNAME; do
    case "$OPTNAME" in
    h)
        printf "Workflow:\n"
        printf "1. parse and create the corresponding output dirctory from given Pluto parameter file\n"
        printf "2. create or override the soft link pluto.ini to the output directory\n"
        printf "3. copy definitions.h to the output directory (easy for yt analysis)\n"
        printf "4. copy executable file pluto to the output directory as backup\n"
        printf "5. create/override job script according to the task name (filename of parameter file)\n"
        printf "6. submit job script\n"
        printf "\n"
        printf "%s\n" "$usage"
        printf "%s\n" "-h,    This help text"
        printf "%s\n" "-n,    Not submit job script"
        printf "%s\n" "-x,    Not change definitions.h and the executable pluto"
        printf "%s\n" "-j,    Specify filename of job script. Default: job.s"
        printf "%s\n" "-s,    Specify the directory of source code. Default: \${filepath%/runs*}/code/"
        exit 0
        ;;
    n)
        no_submit=true
        steps=$(($steps - 1))
        ;;
    x)
        no_pluto=true
        steps=$(($steps - 2))
        ;;
    j)
        jobscript=$(readlink -f $OPTARG)
        printf "$log Specified Job Script: $kw\n" $jobscript
        ;;
    s)
        src=$(readlink -f $OPTARG)/
        printf "$log Specified Directory of Source Code: $kw\n" $src
        ;;
    ?)
        printf "$usage" >&2
        exit 1
        ;;
    esac
done
shift "$(($OPTIND - 1))"

# define the formats of log message
log="> Log:       "
err="\e[31;1mX Error:     \e[0m"
stp="\e[92;1m> Done (%d/$steps):\e[0m"
kw="\e[96m%s\e[0m"
arw="\e[92;1m->\e[0m"

# Get Pluto parameter file
if [ ! -f $1 ]; then
    printf "$err $kw does not exist !\n" $1
    exit 1
fi
inifile=$1
if [ -z $1 ]; then
    inifile=pluto.ini
else
    inifile=$1
fi
inifile=$(readlink -f $inifile)
printf "$log Specified parameter file: $kw\n" $inifile
directory=$(dirname $inifile)
filename=$(basename $inifile)

# 1. Parsing and create output directory
output_dir=$(awk '{if ($1 == "output_dir") print $2}' $inifile)
if [ $output_dir ]; then
    output_dir=$(readlink -f $directory/$output_dir)
    printf "$log Parsed output directory: $kw\n" $output_dir
    if [ -d $output_dir ]; then
        printf "$log Output directory already exits, so just use it\n"
    elif [ -f $output_dir ]; then
        printf "$err $kw already exists but is not a directory\n" $output_dir
        exit 1
    else
        mkdir $output_dir
    fi
    istep=$(($istep + 1))
    printf "$stp Create output directory: $kw\n" $istep $output_dir
    if [ $directory ]; then
        cd $directory
        printf "$log cd to: $kw\n" $(pwd)
    else
        printf "$err Cannot parse directory of parameter file!\n"
        exit 1
    fi
else
    output_dir=$origin
    printf "$log No specified output directory, outputs will be saved in the current directory\n"
    istep=$(($istep + 1))
    printf "$stp Determine output directory: $kw\n" $istep $output_dir
fi

# If running under output directory and not specified parameter file,
# consider it as a re-running
if [[ -z $1 && $output_dir == $origin ]]; then
    no_pluto=true
fi

# 2. Create or override the soft link pluto.ini
inipluto=$output_dir/pluto.ini
# Use relative path for link
rel_filepath=$(realpath --relative-to=$output_dir $inifile)
if [ -f $inipluto ]; then
    # Override
    if [ -L $inipluto ]; then
        rm $inipluto
        ln -s $rel_filepath $inipluto &&
        istep=$(($istep + 1)) &&
        printf "$stp Link pluto.ini: $kw $arw $kw\n" $istep $inipluto $rel_filepath
    else
        printf "$log $kw already exits but is not a symbolic link, so just use it\n" $inipluto &&
        istep=$(($istep + 1)) &&
        printf "$stp Use $kw itself\n" $istep $inipluto
    fi
else
    # Create
    ln -s $rel_filepath $inipluto &&
    istep=$(($istep + 1)) &&
    printf "$stpLink pluto.ini: $kw $arw $kw\n" $istep $inipluto $rel_filepath
fi

# 3. Copy definitions.h and pluto from source code to the output directory
if [ -z $no_pluto ]; then
    if [ -z $src ]; then
        src=${directory%/runs*}/code
    fi
    printf "$log Determine source code directory: $kw\n" $src
    if [ ! -d $src ]; then
        printf "$err Directory of source code does not exist: $kw\n" $src
        exit 1
    fi
    cp $src/definitions.h $output_dir &&
    istep=$(($istep + 1)) &&
    printf "$stp Copy definitions.h: $kw $arw $kw\n" $istep $src/definitions.h $output_dir/definitions.h

    cp $src/pluto $output_dir &&
    istep=$(($istep + 1)) &&
    printf "$stp Copy pluto: $kw $arw $kw\n" $istep $src/pluto $output_dir/pluto
else
    printf "$log Skip updating definitions.h and pluto\n"
fi

# Set default filename of job script to job.s
if [ -z $jobscript ]; then
    jobscript=$origin/job.s
fi
jobscript_name=$(basename $jobscript)

# Task name is the init filename without extension
taskname=$(basename $inifile .ini);
printf "$log Parsed taskname: $kw\n" $taskname
# 5. Replace some fields in job script with task name, the fields include
# job name
# output filename
# error filename
if [ -e $jobscript ]; then
    if [ $jobscript == $output_dir/$jobscript_name ]; then 
        cp $jobscript ${jobscript}.bak
        jobscript=${jobscript}.bak
        printf "$log Template job script is already in output directory, backup it as: $kw\n" $jobscript
    fi
    sed -r -e \
    "\
    s|(^#BSUB[ ]+-J[ ]+)[^ ]+([ ]*.*)$|\1$taskname\2|;\
    s|(^#BSUB[ ]+-o[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/%J.out\2|;\
    s|(^#BSUB[ ]+-e[ ]+)[^ ]+([ ]*.*)$|\1$output_dir/%J.err\2|;\
    s|(^.*[ ]+)[^ ]+pluto(.*-i[ ]+)[^ ]+(.*)|\1$output_dir/pluto\2$inifile\3|;\
    s|^./pluto(.*-i[ ]+)[^ ]+(.*)|$output_dir/pluto\1$inifile\2|;\
    " $jobscript > $output_dir/$jobscript_name &&
    istep=$(($istep + 1)) &&
    printf "$stp Create/Override: $kw\n" $istep $output_dir/$jobscript_name
else
    printf "$err Tempelate job script $kw does not exist !\n" $jobscript
    exit 1
fi

# 6. submit job script
if [ -z $no_submit ]; then
    submit=$(bsub < $output_dir/$jobscript_name) &&
    istep=$(($istep + 1)) &&
    printf "$stp Submit job script: %s\n" $istep "$submit"
else
    printf "$log Not submit job script\n"
fi
